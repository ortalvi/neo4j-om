/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.app.Records;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class keyRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7822986441778786710L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"keyRecord\",\"namespace\":\"com.app.Records\",\"fields\":[{\"name\":\"u\",\"type\":{\"type\":\"record\",\"name\":\"uRecord\",\"fields\":[{\"name\":\"n\",\"type\":\"long\"},{\"name\":\"type\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"v\",\"type\":{\"type\":\"record\",\"name\":\"vRecord\",\"fields\":[{\"name\":\"n\",\"type\":\"long\"},{\"name\":\"type\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"ts\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<keyRecord> ENCODER =
      new BinaryMessageEncoder<keyRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<keyRecord> DECODER =
      new BinaryMessageDecoder<keyRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<keyRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<keyRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<keyRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<keyRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this keyRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a keyRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a keyRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static keyRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.app.Records.uRecord u;
   private com.app.Records.vRecord v;
   private long ts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public keyRecord() {}

  /**
   * All-args constructor.
   * @param u The new value for u
   * @param v The new value for v
   * @param ts The new value for ts
   */
  public keyRecord(com.app.Records.uRecord u, com.app.Records.vRecord v, java.lang.Long ts) {
    this.u = u;
    this.v = v;
    this.ts = ts;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return u;
    case 1: return v;
    case 2: return ts;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: u = (com.app.Records.uRecord)value$; break;
    case 1: v = (com.app.Records.vRecord)value$; break;
    case 2: ts = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'u' field.
   * @return The value of the 'u' field.
   */
  public com.app.Records.uRecord getU() {
    return u;
  }


  /**
   * Sets the value of the 'u' field.
   * @param value the value to set.
   */
  public void setU(com.app.Records.uRecord value) {
    this.u = value;
  }

  /**
   * Gets the value of the 'v' field.
   * @return The value of the 'v' field.
   */
  public com.app.Records.vRecord getV() {
    return v;
  }


  /**
   * Sets the value of the 'v' field.
   * @param value the value to set.
   */
  public void setV(com.app.Records.vRecord value) {
    this.v = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public long getTs() {
    return ts;
  }


  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(long value) {
    this.ts = value;
  }

  /**
   * Creates a new keyRecord RecordBuilder.
   * @return A new keyRecord RecordBuilder
   */
  public static com.app.Records.keyRecord.Builder newBuilder() {
    return new com.app.Records.keyRecord.Builder();
  }

  /**
   * Creates a new keyRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new keyRecord RecordBuilder
   */
  public static com.app.Records.keyRecord.Builder newBuilder(com.app.Records.keyRecord.Builder other) {
    if (other == null) {
      return new com.app.Records.keyRecord.Builder();
    } else {
      return new com.app.Records.keyRecord.Builder(other);
    }
  }

  /**
   * Creates a new keyRecord RecordBuilder by copying an existing keyRecord instance.
   * @param other The existing instance to copy.
   * @return A new keyRecord RecordBuilder
   */
  public static com.app.Records.keyRecord.Builder newBuilder(com.app.Records.keyRecord other) {
    if (other == null) {
      return new com.app.Records.keyRecord.Builder();
    } else {
      return new com.app.Records.keyRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for keyRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<keyRecord>
    implements org.apache.avro.data.RecordBuilder<keyRecord> {

    private com.app.Records.uRecord u;
    private com.app.Records.uRecord.Builder uBuilder;
    private com.app.Records.vRecord v;
    private com.app.Records.vRecord.Builder vBuilder;
    private long ts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.app.Records.keyRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.u)) {
        this.u = data().deepCopy(fields()[0].schema(), other.u);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasUBuilder()) {
        this.uBuilder = com.app.Records.uRecord.newBuilder(other.getUBuilder());
      }
      if (isValidValue(fields()[1], other.v)) {
        this.v = data().deepCopy(fields()[1].schema(), other.v);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasVBuilder()) {
        this.vBuilder = com.app.Records.vRecord.newBuilder(other.getVBuilder());
      }
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing keyRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.app.Records.keyRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.u)) {
        this.u = data().deepCopy(fields()[0].schema(), other.u);
        fieldSetFlags()[0] = true;
      }
      this.uBuilder = null;
      if (isValidValue(fields()[1], other.v)) {
        this.v = data().deepCopy(fields()[1].schema(), other.v);
        fieldSetFlags()[1] = true;
      }
      this.vBuilder = null;
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'u' field.
      * @return The value.
      */
    public com.app.Records.uRecord getU() {
      return u;
    }


    /**
      * Sets the value of the 'u' field.
      * @param value The value of 'u'.
      * @return This builder.
      */
    public com.app.Records.keyRecord.Builder setU(com.app.Records.uRecord value) {
      validate(fields()[0], value);
      this.uBuilder = null;
      this.u = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'u' field has been set.
      * @return True if the 'u' field has been set, false otherwise.
      */
    public boolean hasU() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'u' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.app.Records.uRecord.Builder getUBuilder() {
      if (uBuilder == null) {
        if (hasU()) {
          setUBuilder(com.app.Records.uRecord.newBuilder(u));
        } else {
          setUBuilder(com.app.Records.uRecord.newBuilder());
        }
      }
      return uBuilder;
    }

    /**
     * Sets the Builder instance for the 'u' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.app.Records.keyRecord.Builder setUBuilder(com.app.Records.uRecord.Builder value) {
      clearU();
      uBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'u' field has an active Builder instance
     * @return True if the 'u' field has an active Builder instance
     */
    public boolean hasUBuilder() {
      return uBuilder != null;
    }

    /**
      * Clears the value of the 'u' field.
      * @return This builder.
      */
    public com.app.Records.keyRecord.Builder clearU() {
      u = null;
      uBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'v' field.
      * @return The value.
      */
    public com.app.Records.vRecord getV() {
      return v;
    }


    /**
      * Sets the value of the 'v' field.
      * @param value The value of 'v'.
      * @return This builder.
      */
    public com.app.Records.keyRecord.Builder setV(com.app.Records.vRecord value) {
      validate(fields()[1], value);
      this.vBuilder = null;
      this.v = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'v' field has been set.
      * @return True if the 'v' field has been set, false otherwise.
      */
    public boolean hasV() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'v' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.app.Records.vRecord.Builder getVBuilder() {
      if (vBuilder == null) {
        if (hasV()) {
          setVBuilder(com.app.Records.vRecord.newBuilder(v));
        } else {
          setVBuilder(com.app.Records.vRecord.newBuilder());
        }
      }
      return vBuilder;
    }

    /**
     * Sets the Builder instance for the 'v' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.app.Records.keyRecord.Builder setVBuilder(com.app.Records.vRecord.Builder value) {
      clearV();
      vBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'v' field has an active Builder instance
     * @return True if the 'v' field has an active Builder instance
     */
    public boolean hasVBuilder() {
      return vBuilder != null;
    }

    /**
      * Clears the value of the 'v' field.
      * @return This builder.
      */
    public com.app.Records.keyRecord.Builder clearV() {
      v = null;
      vBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public long getTs() {
      return ts;
    }


    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public com.app.Records.keyRecord.Builder setTs(long value) {
      validate(fields()[2], value);
      this.ts = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public com.app.Records.keyRecord.Builder clearTs() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public keyRecord build() {
      try {
        keyRecord record = new keyRecord();
        if (uBuilder != null) {
          try {
            record.u = this.uBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("u"));
            throw e;
          }
        } else {
          record.u = fieldSetFlags()[0] ? this.u : (com.app.Records.uRecord) defaultValue(fields()[0]);
        }
        if (vBuilder != null) {
          try {
            record.v = this.vBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("v"));
            throw e;
          }
        } else {
          record.v = fieldSetFlags()[1] ? this.v : (com.app.Records.vRecord) defaultValue(fields()[1]);
        }
        record.ts = fieldSetFlags()[2] ? this.ts : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<keyRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<keyRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<keyRecord>
    READER$ = (org.apache.avro.io.DatumReader<keyRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.u.customEncode(out);

    this.v.customEncode(out);

    out.writeLong(this.ts);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.u == null) {
        this.u = new com.app.Records.uRecord();
      }
      this.u.customDecode(in);

      if (this.v == null) {
        this.v = new com.app.Records.vRecord();
      }
      this.v.customDecode(in);

      this.ts = in.readLong();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.u == null) {
            this.u = new com.app.Records.uRecord();
          }
          this.u.customDecode(in);
          break;

        case 1:
          if (this.v == null) {
            this.v = new com.app.Records.vRecord();
          }
          this.v.customDecode(in);
          break;

        case 2:
          this.ts = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










